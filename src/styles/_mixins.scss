@use "sass:math";

@mixin vertical-list {
    display: flex;
    align-items: center;
    flex-direction: column;
    }

    @mixin animate($animation,$duration,$method,$times){
        animation: $animation $duration $method $times;
    }
    @mixin keyframes($name){
        @-webkit-keyframes #{$name} {
            @content;
          }
          @-moz-keyframes #{$name} {
            @content;
          }
          @keyframes #{$name} {
            @content;
          }
    }
    @mixin evenlyPositions($value){
        left: $value;
        top: $value;
        right: $value;
        bottom: $value;
    }
    @mixin childDownChainEffect($childLength,$animation,$duration,$method,$times,$animation-delay){
      @for $i from 1 through $childLength{
         &:nth-child(#{$i}){
            @include animate($animation,$duration,$method,$times);
            animation-delay: #{$animation-delay * ($childLength - $i)};
         }
      }
    }
    @mixin wavyChildEffect($from,$to){
        @for $i from $from through $to {
            &:nth-child(#{$i}) {
              @include evenlyPositions(#{$i * 10 + 10}px); // create a circle with $index * 10 + 10 radius
              animation-delay: #{1.4 + math.div($i,10) - 0.1}s; // apply a delay on movement in z-index that scales from the bottom to the top
            }
          }
    }
    // This will create some breakpoints for use based on the $point that we are using
    @mixin breakpoint($point) {
        @if $point == desktop {
           @media only screen and (min-width: $desktop) { // the breakpoint 
              @content; // whatever you want to be able to
           }
        } 
        @else if $point == tablet {
           @media only screen and (min-width: $tablet) {
              @content; 
           }
        } 
        @else if $point == mobile {
           @media only screen and (min-width: $mobile) {
              @content;
           }
        }
     }